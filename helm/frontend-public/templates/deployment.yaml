apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "frontend-public.name" . }} # Nom du déploiement basé sur Chart.yaml
spec:
  replicas: {{ .Values.replicaCount }}  # Nombre de pods (venant de values.yaml)
  selector:
    matchLabels:
      app: {{ include "frontend-public.name" . }}  # Label pour lier les pods à ce Deployment
  template:
    metadata:
      labels:
        app: {{ include "frontend-public.name" . }}  # Le même label pour les pods
    spec:
      containers:
        - name: {{ .Chart.Name }}  # Nom du conteneur = nom du Chart (ex: frontend-admin)
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"  # Image Docker ECR
          imagePullPolicy: {{ .Values.image.pullPolicy }}  # Always en dev
          ports:
            - containerPort: {{ .Values.service.port }}  # Port du conteneur (80)

          # Vérifie que le conteneur est en vie (redémarrage automatique si ça plante)
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            initialDelaySeconds: 10  # Attend 10s avant la 1ère vérif
            periodSeconds: 20        # Vérifie toutes les 20s

          # Vérifie que l’app est prête à recevoir du trafic (sinon pas mise en service)
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            initialDelaySeconds: 5
            periodSeconds: 10

          # Ressources demandées/limitées (CPU et mémoire)
          resources:
            {{- toYaml .Values.resources | nindent 12 }}